<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0.4
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace King.Mapper.Generated.Sql
{
    using King.Mapper.Data;
    using <#=TestingNamespace#>;
    using System;
    using System.Data;
    using System.Linq;

<#
foreach (var proc in this.Manifest.Values)
{
	var className = proc.Preface + proc.Name;
#>
	[<#=TestClassAttribute#>]
	public class <#=proc.Preface.CamelCase()#><#=proc.Name.CamelCase()#>Tests
	{
		[<#=TestMethodAttribute#>]
		public void Constructor()
		{
			new <#=className#>();
		}
		
		[<#=TestMethodAttribute#>]
		public void IsIStoredProcedure()
		{
			Assert.IsNotNull(new <#=className#>() as IStoredProcedure); 
		}
		
		[<#=TestMethodAttribute#>]
		public void FullyQualifiedName()
		{
			var item = new <#=className#>();
			Assert.AreEqual("[<#=proc.Preface#>].[<#=proc.Name#>]", item.FullyQualifiedName());
		}
		
		#region Property Tests
<#
foreach (var parameter in proc.Variables)
{
	var dataTypeCSharp = DataTypeMappings.DataTypeCSharp(parameter.DataType);
	var name = parameter.ParameterName.Replace("@", string.Empty);
	if (!string.IsNullOrWhiteSpace(name))
	{
#>
		[<#=TestMethodAttribute#>]
		public void <#=name.CamelCase()#>GetSet()
		{
			var item = new <#=className#>();
			var expected = <#=DataTypeMappings.DataTypeInitialize(dataTypeCSharp)#>;
			item.<#=name#> = expected;
<#
			if (AreEqualGeneric)
			{
#>
			Assert.AreEqual<<#=DataTypeMappings.DataTypeCSharp(parameter.DataType)#>>(expected, item.<#=name#>);
<#
			}
			else
			{
#>
			Assert.AreEqual(expected, item.<#=name#>);
<#
			}
#>
		}
		
		[<#=TestMethodAttribute#>]
		public void <#=name.CamelCase()#>DataMapper()
		{
			var item = new <#=className#>();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "<#=name#>"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual("<#=parameter.ParameterName#>", mapper.ParameterName);
            Assert.AreEqual(<#=DataTypeMappings.DataTypeDbType(parameter.DataType)#>, mapper.DatabaseType);
		}

<#
	}
}
#>
		#endregion
	}

<#
}
#>
}