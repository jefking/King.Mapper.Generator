// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace King.Mapper.Generated.Sql
{
    using King.Mapper.Data;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System;
    using System.Data;
    using System.Linq;

	[TestClass]
	public class DboSelectmultiplestatementTests
	{
		[TestMethod]
		public void Constructor()
		{
			new dboSelectMultipleStatement();
		}
		
		[TestMethod]
		public void IsIStoredProcedure()
		{
			Assert.IsNotNull(new dboSelectMultipleStatement() as IStoredProcedure); 
		}
		
		[TestMethod]
		public void FullyQualifiedName()
		{
			var item = new dboSelectMultipleStatement();
			Assert.AreEqual("[dbo].[SelectMultipleStatement]", item.FullyQualifiedName());
		}
		
		#region Property Tests
		#endregion
	}

	[TestClass]
	public class DboSimulatedinsertstatementTests
	{
		[TestMethod]
		public void Constructor()
		{
			new dboSimulatedInsertStatement();
		}
		
		[TestMethod]
		public void IsIStoredProcedure()
		{
			Assert.IsNotNull(new dboSimulatedInsertStatement() as IStoredProcedure); 
		}
		
		[TestMethod]
		public void FullyQualifiedName()
		{
			var item = new dboSimulatedInsertStatement();
			Assert.AreEqual("[dbo].[SimulatedInsertStatement]", item.FullyQualifiedName());
		}
		
		#region Property Tests
		[TestMethod]
		public void TestintGetSet()
		{
			var item = new dboSimulatedInsertStatement();
			var expected = new Random().Next();
			item.TestInt = expected;
			Assert.AreEqual<int?>(expected, item.TestInt);
		}

		[TestMethod]
		public void TestintDataMapper()
		{
			var item = new dboSimulatedInsertStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestInt"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestInt", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Int32, mapper.DatabaseType);
		}

		#endregion
	}

	[TestClass]
	public class DboSimulatedselectstatementTests
	{
		[TestMethod]
		public void Constructor()
		{
			new dboSimulatedSelectStatement();
		}
		
		[TestMethod]
		public void IsIStoredProcedure()
		{
			Assert.IsNotNull(new dboSimulatedSelectStatement() as IStoredProcedure); 
		}
		
		[TestMethod]
		public void FullyQualifiedName()
		{
			var item = new dboSimulatedSelectStatement();
			Assert.AreEqual("[dbo].[SimulatedSelectStatement]", item.FullyQualifiedName());
		}
		
		#region Property Tests
		[TestMethod]
		public void TestintGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = new Random().Next();
			item.TestInt = expected;
			Assert.AreEqual<int?>(expected, item.TestInt);
		}

		[TestMethod]
		public void TestintDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestInt"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestInt", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Int32, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestbigintGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = (long)new Random().Next();
			item.TestBigInt = expected;
			Assert.AreEqual<long?>(expected, item.TestBigInt);
		}

		[TestMethod]
		public void TestbigintDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestBigInt"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestBigInt", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Int64, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestbitGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = true;
			item.TestBit = expected;
			Assert.AreEqual<bool?>(expected, item.TestBit);
		}

		[TestMethod]
		public void TestbitDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestBit"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestBit", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Boolean, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestdecimalGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = (decimal)new Random().NextDouble();
			item.TestDecimal = expected;
			Assert.AreEqual<decimal?>(expected, item.TestDecimal);
		}

		[TestMethod]
		public void TestdecimalDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestDecimal"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestDecimal", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Decimal, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestmoneyGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = (decimal)new Random().NextDouble();
			item.TestMoney = expected;
			Assert.AreEqual<decimal?>(expected, item.TestMoney);
		}

		[TestMethod]
		public void TestmoneyDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestMoney"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestMoney", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Currency, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestfloatGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = (float)new Random().Next();
			item.TestFloat = expected;
			Assert.AreEqual<float?>(expected, item.TestFloat);
		}

		[TestMethod]
		public void TestfloatDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestFloat"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestFloat", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Single, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestdateGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = DateTime.UtcNow;
			item.TestDate = expected;
			Assert.AreEqual<DateTime?>(expected, item.TestDate);
		}

		[TestMethod]
		public void TestdateDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestDate"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestDate", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Date, mapper.DatabaseType);
		}

		[TestMethod]
		public void Testdatetime2GetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = DateTime.UtcNow;
			item.TestDateTime2 = expected;
			Assert.AreEqual<DateTime?>(expected, item.TestDateTime2);
		}

		[TestMethod]
		public void Testdatetime2DataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestDateTime2"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestDateTime2", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.DateTime2, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestdatetimeGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = DateTime.UtcNow;
			item.TestDateTime = expected;
			Assert.AreEqual<DateTime?>(expected, item.TestDateTime);
		}

		[TestMethod]
		public void TestdatetimeDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestDateTime"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestDateTime", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.DateTime, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestcharGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = (char)new Random().Next();
			item.TestChar = expected;
			Assert.AreEqual<char>(expected, item.TestChar);
		}

		[TestMethod]
		public void TestcharDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestChar"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestChar", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Int16, mapper.DatabaseType);
		}

		[TestMethod]
		public void TesttextGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = Guid.NewGuid().ToString();
			item.TestText = expected;
			Assert.AreEqual<string>(expected, item.TestText);
		}

		[TestMethod]
		public void TesttextDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestText"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestText", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.String, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestncharGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = (char)new Random().Next();
			item.TestNChar = expected;
			Assert.AreEqual<char>(expected, item.TestNChar);
		}

		[TestMethod]
		public void TestncharDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestNChar"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestNChar", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.String, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestntextGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = Guid.NewGuid().ToString();
			item.TestNText = expected;
			Assert.AreEqual<string>(expected, item.TestNText);
		}

		[TestMethod]
		public void TestntextDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestNText"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestNText", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.String, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestbinaryGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = new byte[128];
new Random().NextBytes(expected);
			item.TestBinary = expected;
			Assert.AreEqual<byte[]>(expected, item.TestBinary);
		}

		[TestMethod]
		public void TestbinaryDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestBinary"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestBinary", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Binary, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestimageGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = new byte[128];
new Random().NextBytes(expected);
			item.TestImage = expected;
			Assert.AreEqual<byte[]>(expected, item.TestImage);
		}

		[TestMethod]
		public void TestimageDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestImage"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestImage", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Binary, mapper.DatabaseType);
		}

		[TestMethod]
		public void TestguidGetSet()
		{
			var item = new dboSimulatedSelectStatement();
			var expected = Guid.NewGuid();
			item.TestGuid = expected;
			Assert.AreEqual<Guid?>(expected, item.TestGuid);
		}

		[TestMethod]
		public void TestguidDataMapper()
		{
			var item = new dboSimulatedSelectStatement();
            var property = (from prop in item.GetProperties()
                           where prop.Name == "TestGuid"
                           select prop).FirstOrDefault();
            Assert.IsNotNull(property);
            var mapper = property.GetAttribute<DataMapperAttribute>();
            Assert.IsNotNull(mapper);
            Assert.AreEqual<string>("@TestGuid", mapper.ParameterName);
            Assert.AreEqual<DbType>(DbType.Guid, mapper.DatabaseType);
		}

		#endregion
	}

}